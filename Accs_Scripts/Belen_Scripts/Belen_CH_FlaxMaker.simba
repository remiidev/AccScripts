{$IFNDEF SCRIPT_CHAIN}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}
begin
Antiban.SetupBiometrics();
end;
{$ENDIF}
{$include_once ../Scripts/Accs_Scripts/RemiLib.simba}

type
  EFlaxSpinnerState = (
    OPEN_BANK,
    WITHDRAW_MATS,
    CLOSE_INTERFACE,
    HANDLE_WARNING,
    CLOSE_CONTEXT, DEPOSIT,
    DO_SPINFLAX,
    DEPOSIT_BOTH,
    BREAK,
    END_SCRIPT
    );

  TFlaxSpinner = record
    State: EFlaxSpinnerState;

    RawDhide: TRSBankItem;
    Dhide: TRSBankItem;

    DidTan: Boolean;
    Actions, Profit: Int32;
    SpellPosition: TBox;
    XPGain,PrevXP : Int32;
    ShutdownTime : Int64;
  end;

procedure TFlaxSpinner.Report();
var
  gainedXP: Int32;
begin
  ClearDebug();
  Profit := (Self.Actions * 288);
  gainedXP := (Self.Actions * 75);

  ProgReport(1, 'Flax Spinner', 'ZYZZ', '420',
                ['Runtime', 'XP gained', 'Profit made app', 'Casts', 'Until break', 'Shutdown'],
                [SRL.MsToTime(GetTimeRunning, Time_Short),
                 ToStr(Round(gainedXP, 4), '(', NumberPerHour(gainedXP,GetTimeRunning), ' / hr)'),
                 ToStr(Round(Self.Profit, 4), '(', NumberPerHour(Self.Profit,GetTimeRunning), ' / hr)'),
                 ToStr(Round(Self.Actions, 2), '(', NumberPerHour(Self.Actions,GetTimeRunning), ' / hr)'),
                 Antiban.TimeUntilBreak(Antiban.Breaks[0]),
                 SRL.MsToTime(Self.ShutdownTime-GetTimeRunning, Time_Short)]);
end;

{===========================================}
{            SCRIPT/BOT METHODS             }
{===========================================}

//DEPOSIT
function TFlaxSpinner.Deposit(): Boolean;
begin
  if Bank.DepositItem(Self.Dhide, True) then
  begin
    wait(120, 180);
    mouse.move([410,226,434,253], False, EMouseDistribution.MOUSE_DISTRIBUTION_ROWP);
    Result := WaitUntil(not Inventory.ContainsItem(Self.Dhide.Item), 200, 600);
  end;
  writeln('Strings Deposited');
  Self.Actions += 5;
  Self.Report();
end;

function TFlaxSpinner.Deposit_Both(): Boolean;
begin
  if Bank.DepositItem(Self.Dhide, True) and Bank.DepositItem(Self.RawDhide, True) then
  begin
    wait(120, 180);
    mouse.move([410,226,434,253], False, EMouseDistribution.MOUSE_DISTRIBUTION_ROWP);
    Result := WaitUntil(not Inventory.ContainsItem(Self.Dhide.Item), 200, 600);
  end;
  writeln('Debugging Inv');
end;

procedure TFlaxSpinner.spamClick();
var
  i : Int32;
  g : Int32;
  xptemp: Int32;
begin
  //i := Antiban.GetUniqueInt(3, 1, 4);
  g := SRL.NormalRange(1, 4);

  for i := 1 to g do
  begin
    Mouse.click(1);
    wait(120,220);
  end;
  XPbar.WaitXP(4000, 300);
end;

procedure TFlaxSpinner.FinalSpamClick();
var
  i : Int32;
  g : Int32;
  xptemp: Int32;
begin
  //i := Antiban.GetUniqueInt(3, 1, 4);
  g := SRL.NormalRange(1, 4);

  for i := 1 to g do
  begin
    Mouse.click(1);
    wait(120,220);
  end;
  Bank.Hover(ERSBankLocation.CASTLE_WARS, False);
  XPbar.WaitXP(4000, 300);
end;

//TAN
procedure TFlaxSpinner.SpinFlax();
var
  i: Int32 :=0;
  Clicks : Int32;
begin
  if Magic.Open() and MainScreen.IsUpText('Flax') then
  begin
    Self.spamClick();
    Antiban.BioWait(330);
    Self.spamClick();
    Antiban.BioWait(330);
    Self.spamClick();
    Antiban.BioWait(330);
    Self.spamClick();
    Antiban.BioWait(330);
    Self.FinalSpamClick();
  end else
  begin
    mouse.move(Self.SpellPosition, False, EMouseDistribution.MOUSE_DISTRIBUTION_ROWP);
    Self.spamClick();
    Antiban.BioWait(330);
    Self.spamClick();
    Antiban.BioWait(330);
    Self.spamClick();
    Antiban.BioWait(330);
    Self.spamClick();
    Antiban.BioWait(330);
    Self.FinalSpamClick();
  end;

  Antiban.DoAntiban();
  if not MainScreen.IsUpText('chest') then
    Bank.Hover(ERSBankLocation.CASTLE_WARS, False);
  Self.DidTan:= True;
  writeln('Done Tanning');
end;

//WITHDRAW MATS
procedure TFlaxSpinner.WithdrawMats();
begin
  repeat
  begin
    Bank.WithdrawItem(Self.RawDhide, True);
    wait(120, 180);
    Mouse.Move(Self.SpellPosition, False, EMouseDistribution.MOUSE_DISTRIBUTION_ROWP);
    WaitUntil(Inventory.ContainsItem(RawDhide.item), 200, 5000);
  end;
  Until(Inventory.ContainsItem(RawDhide.item));
  Self.DidTan := False;
  PressKey(VK_ESCAPE);
  WaitUntil(magic.IsOpen(), 200, 800);
  Antiban.DoAntiban();
end;

//OPEN BANK
procedure TFlaxSpinner.OpenBankMod();
begin
  if MainScreen.IsUpText('Use') then
  begin
   Mouse.Click(1);
   wait(50, 60);
   Inventory.MouseSlot(0);
   WaitUntil(MainScreen.HasInterface(), 200, 3000);
   wait(120, 240);
  end else
  begin
    Bank.Open(ERSBankLocation.CASTLE_WARS);
    wait(100, 180);
  end;
end;

//ANTIBAN
//MEDIANO AFK:
procedure TFlaxSpinner.SetupAntiban();
begin
  Antiban.Skills := [ERSSkill.MAGIC];

  Antiban.MinZoom := 90;
  Antiban.MaxZoom := 100;

  Antiban.AddTask(ONE_SECOND*90, @Mouse.RandomMovement);

  Antiban.AddTask(ONE_MINUTE*3,  @Antiban.DoShortLoseFocus);
  Antiban.AddTask(ONE_MINUTE*12,  @Antiban.DoMidLoseFocus);
  Antiban.AddTask(ONE_MINUTE*22,  @Antiban.DoLongLoseFocus);

  Antiban.AddTask(ONE_MINUTE*29, @Antiban.HoverSkills);

  Antiban.AddBreak(ONE_MINUTE*30, ONE_SECOND*90, 0.4, 0.0);
  Antiban.AddBreak(ONE_MINUTE*50, ONE_MINUTE*4, 0.4, 0.0);
  Antiban.AddBreak(ONE_MINUTE*30, ONE_MINUTE*2, 0.4, 0.0);
end;

{===========================================}
{               GET STATE                   }
{===========================================}

//GET STATE
function TFlaxSpinner.GetState(): EFlaxSpinnerState;
begin
  if (not RSClient.IsLoggedIn) then Exit;
  if MainScreen.HasInterface() then
  begin
    if Bank.IsOpen() then
    begin
      if Inventory.ContainsItem(Self.DHide.Item) and Inventory.ContainsItem(Self.RawDhide.Item) then
        Exit(EFlaxSpinnerState.DEPOSIT_BOTH);

      if Inventory.ContainsItem(Self.DHide.Item) then
        Exit(EFlaxSpinnerState.DEPOSIT);

      if not Inventory.ContainsItem(Self.RawDhide.Item) then
        Exit(EFlaxSpinnerState.WITHDRAW_MATS);
    end;
    Exit(EFlaxSpinnerState.CLOSE_INTERFACE);
  end;

  if magic.IsOpen() then
    if Self.DidTan then
      Exit(EFlaxSpinnerState.OPEN_BANK);
    Exit(EFlaxSpinnerState.DO_SPINFLAX);

  if Chat.HasContinue() then
    Exit(EFlaxSpinnerState.HANDLE_WARNING);
end;

var
  FlaxSpinner: TFlaxSpinner;
{===========================================}
{                     INIT                  }
{===========================================}

procedure TFlaxSpinner.Init(MaxTime: UInt64);
var
  mypos_, BankSpot : Tpoint;
  Inventory_ : TRSBankItemArray;
  inventoryitems: TRSItemArray;
  i: Int32;
  myBox : Tbox;
begin
  Mouse.Speed      := 15 + Antiban.GetBehavior(EBioBehavior.MOUSE_SPEED);
  Mouse.Gravity    := 8  + Round(Antiban.GetBehavior(EBioBehavior.MOUSE_GRAVITY) / 2);
  Mouse.Wind       := 3  + Round(Antiban.GetBehavior(EBioBehavior.MOUSE_WIND) / 2);
  Mouse.MissChance := 11 + Antiban.GetBehavior(EBioBehavior.MOUSE_MISS);
  mouse.CanIdle := False;

  if (not RSClient.IsLoggedIn) then
    Login.LoginPlayer();

  if (not InRange(Options.GetZoomLevel, 100, 100)) then
    Options.SetZoomLevel(SRL.TruncatedGauss(100,100));
  MM2MS.ZoomLevel := Options.GetZoomLevel();

  Self.DHide := ["Bow String", 25, False, 4, -1];
  Self.RawDhide := ['Flax', 25, False, 4, -1];
  Self.DidTan := False;
  Self.SpellPosition := [630, 314, 659, 338];
  BankSpot := [424,242];


  //INVENTORY
  //SETUP BANK/INVENTORY + ADD REGIONS
  begin
    if Bank.Open(ERSBankLocation.CASTLE_WARS) then
    begin
      Inventory_ += TRSBankItem.Setup('Rune pouch', 1, False);
      Inventory_[0].Tab := 0; Inventory_[0].Scroll := 0;
      Inventory_ += TRSBankItem.Setup('Nature rune', -1, False);
      Inventory_[1].Tab := 1; Inventory_[1].Scroll := 0;
      Inventory_ += TRSBankItem.Setup('Jug', 1, False);
      Inventory_[2].Tab := 0; Inventory_[2].Scroll := 0;
      Inventory_ += TRSBankItem.Setup('Air battlestaff', 1, False);
      Inventory_[3].Tab := 6; Inventory_[3].Scroll := 0;

      for i := 0 to High(Inventory_) do
      begin
        Bank.WithdrawItem(Inventory_[i], True);
        Wait(0, 72);
      end;

      Bank.OpenTab(4);
      Bank.FindItem('Flax', myBox);

      if not myBox.Contains(BankSpot) then
      begin
        waitEx(250, 50);
        Mouse.HumanMove(MyBox.Middle);
        Mouse.DragTo(BankSpot);
      end;

      while Bank.IsOpen() do
        Bank.Close();

      while not Inventory.IsOpen() do
        Inventory.Open();
    end;
  end;

  //lower pitch
  MainScreen.SetLowestPitch();
  MainScreen.GetBankClose();

  Inventory.Drag(0, 27);
  wait(80,120);
  Inventory.Drag(1, 26);
  wait(80,120);
  Inventory.Drag(2, 25);
  waitEx(400, 20);

  while Inventory.ContainsItem(Inventory_[3].Item) do
  begin
    Inventory.ClickItem(Inventory_[3].Item);
    Waituntil(not Inventory.ContainsItem(Inventory_[3].Item), 200, 5000);
  end;

  while Inventory.ContainsItem(Inventory_[3].Item) do
  begin
    Inventory.ClickItem(Inventory_[3].Item);
    Waituntil(not Inventory.ContainsItem(Inventory_[3].Item), 200, 5000);
  end;

  EnableMagicFilters();
  Self.SetupAntiban();
  Self.OpenBankMod();

  ShutdownTime := GetTimeRunning + MaxTime;
end;

{===========================================}
{                  RUN(S)                   }
{===========================================}

procedure TFlaxSpinner.Run();
begin
  while (GetTimeRunning < Self.ShutdownTime) do
  begin
    if (not RSClient.IsLoggedIn) then
      Login.LoginPlayer();

    State := Self.GetState();
    Writeln('Doing: ', State);

    case State of
      EFlaxSpinnerState.OPEN_BANK: Self.OpenBankMod();
      EFlaxSpinnerState.WITHDRAW_MATS: Self.WithdrawMats();
      EFlaxSpinnerState.CLOSE_INTERFACE: MainScreen.CloseInterface();
      EFlaxSpinnerState.DO_SPINFLAX: Self.SpinFlax();
      EFlaxSpinnerState.DEPOSIT: Self.Deposit();
      EFlaxSpinnerState.DEPOSIT_BOTH: Self.Deposit_Both;
    end;
  end;
end;

procedure TFlaxSpinner.ChainerRun(maxTime: Uint32);
begin
  writeln('STARTING Flax Spinner CHAINER RUN');
  Self.Init(maxTime);
  Self.Run();

  while (Inventory.Count >= 1) do
  begin
    if Bank.Open(ERSBankLocation.CASTLE_WARS) then
    begin
      Bank.DepositAll();
      wait(200, 300);
      Mouse.click([467, 299, 493, 325], 1);
    end;
    Bank.Close();
  end;
  Antiban.Tasks := [];
  Antiban.Breaks := [];
  writeln('Flax Spinner CHAINER RUN DONE ----------');
end;


{$IFNDEF SCRIPT_CHAIN}
begin
  FlaxSpinner.ChainerRun(40 * ONE_MINUTE);
end.
{$ENDIF}

